1. category machine:

    createByIP(vpdc, name, templateName, description, ipAddresses, capacityProperties, properties) #Create a machine starting from a simple set of parameters. This method uses IP addresses as input \n
    @param vpdc string, Name of VPDC
    @param name string, Name of the machine. The name is a freely chosen name, which has to be unique in SPACE
    @param templateName string, Name of a machine template, which must exist in the Space. To obtain the list of available machine templates, run machinetemplate.list()
    @param description string, This is free text describing the purpose of the machine, if multi-line use back-slash + n
    @param ipAddresses list(string), Is a list of IP addresses which will be given to a machine. The CloudAPI checks if these IP addresses exist on Public Networks or Private Networks which belong to the customer, if not an error is thrown
    @param capacityProperties dict, The keys of the dict are the names of capacity properties, the values of the dict must be possible values for the capacity property. \n Example: {"Machine Performance": "200MB RAM + 800Mhz CPU", "Data Disk": "10GB"} \n If you want to know the possible names/values, run machinetemplate.list() and machinetemplate.getDetails(templateName).
    @param properties dict, This is a dict of property/value pairs as part of the capacityProperties dict. The parameter names must be existing properties for the chosen machine template, \n If you want to know the possibilities, see machinetemplate.list() and machinetemplate.getDetails(templateName).
    @return Machine name

    createByNetwork(vpdc, name, templateName, description, publicIPRange, privateNetworks, capacityProperties, properties) #Create a machine starting from a simple set of parameters. This method uses predefined network names as input. The IP addresses are chosen automatically.
    @param vpdc @SEE::machine.createByIP
    @param name @SEE::machine.createByIP
    @param templateName @SEE::machine.createByIP
    @param description @SEE::machine.createByIP
    @param publicIPRange string, The name of an existing publicIPRange. The CloudAPI will check if there are IP addresses available on the defined IPRANGE, if not an error is thrown. One IP address will be given. \nTo know the list of network names, use: publiciprange.list() \n If you want to know if there are free IP addresses, use publiciprange.listFreeIP() .\n If you do not specify this parameter (""), the machine will not be connected to a public network.
    @param privateNetworks list(string), Is a list of private networks names. The machine will be connected to one of these private networks upon the deployment of the machine. An error will be thrown if the private networks don't exist in the space, or if there are no IP addresses available on the private network. \n If one or more private networks do not belong to the VPDC, they will be added automatically. \n The machine will get one IP address from each private network. \n To know which network names do exist use: privatenetwork.list().  To know the free IP addresses, use privatenetwork.listFreeIP(). \n If the private network does not exist in the VPDC, the CloudAPI links it to the VPDC automatically. The first Public Network will be assigned to the Pubic Network object that is present in the VPDC by default. For additional Public Networks, objects will be created automatically.
    @param capacityProperties @SEE::machine.createByIP
    @param properties @SEE::machine.createByIP
    @return True or Error

    ipAddressAdd(vpdc, machine, ipAddress) #A new IP address and/or private or public LAN will be added to an existing virtual machine. If required a new Private LAN or Public LAN  will be attached to the machine (Only implemented for public IP addresses now)
    @param vpdc @SEE::machine.createByIP 
    @param machine string, Name of the machine
    @param ipAddress string, IP address to be added to the machine. The CloudAPI checks if this IP address exists in a private or publick network. Use privatenetwork.listFreeIP() or publiciprange.listFreeIPFromIPRange() to check which IP addresses can be used
    @return string with IP address

    ipAddressDelete(vpdc, machine, ipAddress) #Delete an IP address from a machine
    @param vpdc @SEE:machine.ipAddressAdd
    @param machine @SEE:machine.ipAddressAdd
    @param ipAddress string, IP address to be removed from the machine. Use machine.getMachineDetails(vpdc, machine) to know the IP addresses of the machine.
    @return string with IP address
    
    delete(vpdc, machine) #Remove a machine from a VPDC, but keep the machine in the model.
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE:machine.ipAddressAdd
    @return True or Error
    
    rename(vpdc, oldName, newName) #Rename a machine in a VPDC
    @param vpdc @SEE:: machine.ipAddressAdd
    @param oldName string, The current name of the machine
    @param newName string, The new name of the machine
    @return New name of the machine

    setDescription(vpdc, machine, description) #Set a description on a machine
    @param vpdc @SEE:: machine.ipAddressAdd
    @param machine @SEE::machine.ipAddressAdd
    @param description string, New description of the machine
    @return True or Error

    list(vpdc) #list machines in a VPDC
    @param vpdc @SEE:: machine.ipAddressAdd
    @return [], list of machine names   

    start(vpdc, machine) #Start a machine (if machine is hibernated use machine.resume())
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE:: machine.ipAddressAdd
    @return True or Error

    stop(vpdc, machine) #Shut down a machine
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE::machine.ipAddressAdd
    @return True or Error

    reboot(vpdc,machine) #Reboot a machine
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE::machine.ipAddressAdd
    @return True or Error

    backup(vpdc, machine) #Create a backup of a machine
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE::machine.ipAddressAdd
    @return True or Error

    listBackups(vpdc, machine) #List with all the backups of a machine
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE::machine.ipAddressAdd
    @return [], list with the names of the backups of the machine

    restoreBackup(vpdc, machine, backup) #Restore a backup and remove the current machine state
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE::machine.ipAddressAdd
    @param backup string, Name of the backup to restore
    @return True or Error
  
    exportBackup(vpdc, machine, backup, target, targetLogin, targetPassword) #Export a backup to a remote location
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE::machine.ipAddressAdd
    @param backup string, Name of the backup to export
    @param target string, Location where the backup should be saved
    @param targetLogin string, Login to access the remote target
    @param targetPassword string, Password linked to the login, to allow  access to the target location
    @return True or Error

    listCapacityProperties(vpdc, machine) #List all Capacity Properties and their corresponding values on a machine
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE::machine.ipAddressAdd
    @return dict, "capacityProperty: string" 

    listProperties(vpdc, machine) #List of all properties of a machine and their corresponding values  
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE::machine.setDescription
    @return dict, "property: string"

    setCapacityProperty(vpdc, machine, capacityproperty, value) #Set a value for a capacity property on a machine
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE::machine.ipAddressAdd
    @param capacityproperty string, Name of the capacity property
    @param value  string, Value for the capacity property
    @return True or Error

    setProperty(vpdc, machine, property, value) #Set a value for a property on a machine
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE::machine.ipAddressAdd
    @return True or Error
  
    getMachineDetails(vpdc, machine) #Get the details of a machine, such as machine name, status, memory, CPU, ...
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE::machine.ipAddressAdd
    @return { name: <string>, runStatus: <string>, modelStatus: <string>, description: <string>, hostname: <string>, os: <string>, cpu: <int>, memory: <int>, \n networkinterfaces:  [ { nic: <string>, macaddress: <string>, ipaddress: <string>, netmask: <string>, gateway: <string> } , ... ], \n backups:            [ { name: <string>, type: <string>, created: <datetime> } , ... ], \n services:           [ { application: <string>, enabled: <boolean>, login: <string> } , ... ], \n capacityProperties: { propertyName(string): value(string), ...}, \n properties:         { propertyName(string): value(string), ...} \n } \n The runsStatus-string is one of the DRP Machine statuses. ("halted", "running", "paused", ...), the modelStatus-string is one of the vpdcObjectStatuses ("deployed", "error", ...) \n CPU is in Mhz, memory is in MB RAM. \n Newlines in the description are encoded as backslash-n.

    executeQshellScript(vpdc,machine,qshellScriptContent) #Execute a Q-Shell script on a machine. This function requires a Q-Agent on the machine
    @param vpdc @SEE::machine.ipAddressAdd
    @param machine @SEE::machine.ipAddressAdd
    @return dict, {"jobGuid: string,status:string}

    copyFromTemplate(sourcevpdc, targetvpdc, machine, nameOfCopy) #Copy a machine, independent if the machine is deployed or not. The disks will have the original template-content, but the CapacityProperties and Properties are copied to the new machine.\n The copied machine is automatically connected to the same public and private networks as the original machine, with an arbitrary IP address. If one of the connected networks has insufficient free IP addresses, an error is thrown.
    @param sourcevpdc string, Name of the VPDC (Virtual Data Center) from which we want to copy a machine
    @param targetvpdc string, Name of the VPDC (Virtual Data Center) in which we want to create a machine
    @param machine @SEE::machine.setDescription
    @param nameOfCopy string, New name for the created copy
    @return True or Error

2. category publiciprange:

    list() #List of all public IP ranges
    @return dict, {publicIPRangeName:"StartIPAddress-StopIPAddress",...}

    listInVpdc(vpdc) #List of all public IP ranges in a VPDC
    @param vpdc @SEE::machine.ipAddressAdd
    @return dict, {publicIPRangeName:"StartIPAddress-StopIPAddress",...}

    listWithFreeIPAddresses()  #List of all public IP ranges which have one or more free IP addresses 
    @return dict, The keys are the names of the public IP ranges, the values are lists of free IP Addresses. \n Public IP ranges without free addresses are not included. (So an empty list will never appear as value.) \n Example: {publicipRangeName, ["1.2.3.4", "1.2.3.6"],...}

    listFreeIPFromIPRange(name) #List of free IP addresses in a public IP range. If the name is empty, you get the free IP addresses of all public IP ranges
    @param name string, Name of a public IP range. The name is unique within space
    @return [], list of free IP addresses

    rename(oldName, newName)   #Rename a public IP range, the original name is given by the cloud provider, the cloud user can change it.
    @param oldName string, Name of the public IP range, given by the cloud provider
    @param newName string, New name of the public IP range
    @return True or Error

    getDetails(name) #Get the details of a public IP range
    @param name @SEE::publiciprange.listFreeIPFromIPRange
    @return dict, {name: string, customer: string, network: string, netmask: string,startiprange: string,stopiprange: string,gateway: string, domainnameservers: string}

    split(name, newIpRangeName, nrOfIps)  #Split an existing IP range into subranges. The original IP ranges are given by the cloud provider.
    @param name @SEE::publiciprange.listFreeIPFromIPRange
    @param newIpRangeName string, Name of new public IP range
    @param nrOfIps integer, Number of IP addresses for the new IP range
    @return True or Error
 
    delete(name)  #Delete a public IP range
    @param name @SEE::publiciprange.listFreeIPFromIPRange
    @return  True or Error


3. category privatenetwork:  #Allows cloud users to work with their private networks, private networks cannot be connected to the outside world.

    list() #List of all private networks
    @return array(dict)  [{privateNetworkName:name, network:aipaddr, subnet:mask}]

    listInVpdc(vpdc) #List of all private networks in a VPDC
    @param vpdc @SEE::machine.ipAddressAdd
    @return array(dict)  [{privateNetworkName:name, network:aipaddr, subnet:mask}]
      
    rename(oldName, newName)   #Rename a private network, the original name is automatically created when a private network is needed
    @param oldName @SEE::publiciprange.rename
    @param newName @SEE::publiciprange.rename
    @return True or Error

    listFreeIP(name)   #List of free IP addresses in a private network. A name of the private network must be provided with this function 
    @param name string, Name of a public IP range. The name is unique within space
    @return [], list of free IP addresses

    create(name)  #Create a new private network. The cloud software will make sure a new VLAN (or comparable technology) is created with a unique name in the cloud domain.
    @param name @SEE:privatenetwork.listFreeIP
    @return True or Error

    getDetails(name) #Get the details of a private network
    @param name @SEE:privatenetwork.listFreeIP
    @return {}, {name: string, customer: string, network: string, netmask: string,gateway: string, domainnameservers: string}
 
    delete(name)  #Delete a private network if no machine is using it. An error is thrown if a machine uses the private network
    @param name @SEE:privatenetwork.listFreeIP
    @return True or Error


4. category machinetemplate:
  
    list() #List of all available machine templates
    @return tuple of machine template names

    getDetails(machineTemplate) #Get the details of a machine template
    @param machineTemplate string, Name of the template
    @return dict, {name:string, description: string, Type: string, OS: string, capacityProperties: {propertyName(string): value(string), ...}, properties: {propertyName(string): value(string), ...}, Ports:{portName(string): {Type: string,capacityProperties: {propertyName(string): value(string), ...}}, ...}}

5. category portal:   

    getVersion()  #This function is only to check the version of the CloudAPI
    @return string, Version of the CloudAPI


6. category vpdc:

    create(vpdc) #Create a new VPDC, based on a VPDC-template
    @param vpdc @SEE::machine.ipAddressAdd
    @return string, name of the VPDC 

    delete(vpdc) #Delete a VPDC
    @param vpdc @SEE::vpdc.create
    @return True or Error

    deploy(vpdc) #Deploy a VPDC
    @param vpdc @SEE::vpdc.create
    @return True or Error

    list() #Get a list of all VPDCs
    @return tuple of VPDC names
   
    start(vpdc) #Start all machines in a VPDC
    @param vpdc @SEE::vpdc.create
    @return True or Error

    stop(vpdc) #Stop all machines in a VPDC
    @param vpdc @SEE::vpdc.create
    @return True or Error

    getDeployStatus(vpdc) #Get the deploy-status of the VPDC. \n Mapping of DRP states on CloudAPI states: \n * DRP UNCONFIGURED, CONFIGURED, MODELED  => CloudAPI UNDEPLOYED \n * DRP PROCESSING, DEPLOYING  => CloudAPI DEPLOYING \n * DRP DEPLOYED  => CloudAPI \n DEPLOYED * DRP CHANGED  => CloudAPI CHANGED \n * DRP DELETE, DELETED, DELETING  => CloudAPI UNDEPLOYING \n * DRP ERROR  => CloudAPI ERROR
    @param vpdc @SEE::vpdc.create
    @return String: "UNDEPLOYED", "DEPLOYING", "DEPLOYED", "CHANGED", "UNDEPLOYING"or "ERROR"

7. category subspace:

    create(subSpace, processingCredits, storageCredits, networkingCredits, userFirstName, userLastName, userLogin, userPassword, email) #Create a new  sub-space
    @param subSpace string, Name of the sub-space
    @param processingCredits integer, Amount of processing credits, assigned to this space
    @param storageCredits integer, Amount of storage credits, assigned to this space
    @param networkingCredits integer, Amount of networking credits, assigned to this space
    @param userFirstName string, First name of the user
    @param userLastName string, Last name of the user
    @param userLogin string, User login to access the new space
    @param userPassword string, User password to access the new space
    @param email  string, E-mail address to reach the customer
    @return True or Error

    delete(subSpace) #Delete a sub-space
    @param subSpace @SEE::subspace.create
    @return True or Error

    listSubSpaces() #List all sub-spaces
    @return tuple of sub-space names

    addUser(subSpace, userFirstName, userLastName,userLogin, userPassword, email)  #Add a user account to a sub-space
    @param subSpace @SEE::subspace.create
    @param userFirstName @SEE::subspace.create
    @param userLastName @SEE::subspace.create
    @param userLogin  @SEE::subspace.create
    @param userPassword @SEE::subspace.create
    @param email @SEE::subspace.create
    @return True or Error

    listUsers(subSpace) #List of all user accounts in this sub-space
    @param subSpace @SEE::subspace.create
    @return dict, {userLogin:{firstName::string,;lastName:string,email:string},...}

    deleteUser(subSpace, userLogin) #Delete a user account from the sub-space
    @param subSpace @SEE::subspace.create
    @param userLogin string, Login of the user account which you want to delete
    @return True or Error
  
    updateUser(subSpace, userLogin, userFirstName, userLastName, userPassword, email) #Update the information of a user account. If the value of a parameter is empty, the original value is taken
    @param subSpace @SEE::subspace.create
    @param userFirstName @SEE::subspace.create
    @param userLastName @SEE::subspace.create
    @param userLogin  @SEE::subspace.create
    @param userPassword @SEE::subspace.create
    @param email @SEE::subspace.create
    @return True or Error
   
    getCreditInfo(subSpace) #Get the credit information: total, used and available credits in the subspace
    @param subSpace @SEE::subspace.create
    @return dict(dict),{total:  {processingCredits: integer, storageCredits: integer, networkCredits: integer},used: {processingCredits: integer, storageCredits: integer, networkingCredits: integer},available: {processingCredits: integer, storageCredits: integer, networkingCredits: integer}}

 
    addPublicIpRange(subSpace,publicIpRange) #Add a public IP range to a Space, required to create VPDCs with public IP addresses
    @param subSpace @SEE::subspace.create
    @param publicIpRange string, Name of the public IP range
    @return True or Error
 
    removePublicIpRange(subSpace,publicIpRange) #Remove a public IP range from a Space. This function fails if the public IP range is still in use in a VPDC
    @param subSpace @SEE::subspace.create
    @param publicIpRange @SEE::subspace.addPublicIpRange
    @return True or Error
  

8. category jobs:

    list()  #List all the jobs linked to this subspace, return the id and a short description
    @return array(dict)  , [{ID: integer, status:string,qactionName: string,rootobjectName: string,starttime: string, endtime:string}]

    getDetailedInfo(id) #Get detailed info of a specific job
    @param id integer, identifier for the job
    @return dict
